

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Domain.Infrastructure\App.config"
//     Connection String Name: "LoggingContext"
//     Connection String:      "Data Source=.\MSSQLSERVERLOCAL;Initial Catalog=LOGGING;Integrated Security=true;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Domain.Infrastructure.DataAccess.EntityFramework.TableLog
{

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<TableLog> TableLogs { get; set; } // TableLog
        System.Data.Entity.DbSet<TableLogDetail> TableLogDetails { get; set; } // TableLogDetail

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<TableLog> TableLogs { get; set; } // TableLog
        public System.Data.Entity.DbSet<TableLogDetail> TableLogDetails { get; set; } // TableLogDetail

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=LoggingContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new TableLogConfiguration());
            modelBuilder.Configurations.Add(new TableLogDetailConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new TableLogConfiguration(schema));
            modelBuilder.Configurations.Add(new TableLogDetailConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region POCO classes

    // TableLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class TableLog
    {
        [Column(@"TableLogId", Order = 1, TypeName = "bigint")]
        [Required]
        [Key]
        [Display(Name = "Table log ID")]
        public long TableLogId { get; set; } // TableLogId (Primary key)

        [Display(Name = "App ID")]
        public int? AppId { get; set; } // AppId

        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Table name")]
        public string TableName { get; set; } // TableName (length: 50)

        [Required]
        [Display(Name = "Primary key value")]
        public long PrimaryKeyValue { get; set; } // PrimaryKeyValue

        [Display(Name = "Operation guid")]
        public System.Guid? OperationGuid { get; set; } // OperationGuid

        [Required]
        [Display(Name = "Operation time")]
        public System.DateTime OperationTime { get; set; } // OperationTime

        [Display(Name = "User ID")]
        public int? UserId { get; set; } // UserId

        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Ip")]
        public string Ip { get; set; } // Ip (length: 50)

        [Required]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "State")]
        public string State { get; set; } // State (length: 1)

        [Required]
        [Display(Name = "Is proxy")]
        public bool IsProxy { get; set; } // IsProxy

        // Reverse navigation

        /// <summary>
        /// Child TableLogDetails where [TableLogDetail].[TableLogId] point to this entity (FK_TableLogDetail_TableLog)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TableLogDetail> TableLogDetails { get; set; } // TableLogDetail.FK_TableLogDetail_TableLog

        public TableLog()
        {
            TableLogDetails = new System.Collections.Generic.List<TableLogDetail>();
        }
    }

    // TableLogDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class TableLogDetail
    {
        [Column(@"TableLogDetailId", Order = 1, TypeName = "bigint")]
        [Required]
        [Key]
        [Display(Name = "Table log detail ID")]
        public long TableLogDetailId { get; set; } // TableLogDetailId (Primary key)

        [Required]
        [Display(Name = "Table log ID")]
        public long TableLogId { get; set; } // TableLogId

        [Required]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Column name")]
        public string ColumnName { get; set; } // ColumnName (length: 50)

        [Display(Name = "Old value")]
        public string OldValue { get; set; } // OldValue

        [Display(Name = "New value")]
        public string NewValue { get; set; } // NewValue

        // Foreign keys

        /// <summary>
        /// Parent TableLog pointed by [TableLogDetail].([TableLogId]) (FK_TableLogDetail_TableLog)
        /// </summary>
        public virtual TableLog TableLog { get; set; } // FK_TableLogDetail_TableLog
    }

    #endregion

    #region POCO Configuration

    // TableLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class TableLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TableLog>
    {
        public TableLogConfiguration()
            : this("dbo")
        {
        }

        public TableLogConfiguration(string schema)
        {
            ToTable("TableLog", schema);
            Property(x => x.TableLogId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AppId).HasColumnName(@"AppId").HasColumnType("int").IsOptional();
            Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType("nvarchar");
            Property(x => x.PrimaryKeyValue).HasColumnName(@"PrimaryKeyValue").HasColumnType("bigint");
            Property(x => x.OperationGuid).HasColumnName(@"OperationGuid").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.OperationTime).HasColumnName(@"OperationTime").HasColumnType("datetime");
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsOptional();
            Property(x => x.Ip).HasColumnName(@"Ip").HasColumnType("varchar").IsUnicode(false);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsUnicode(false);
            Property(x => x.IsProxy).HasColumnName(@"IsProxy").HasColumnType("bit");
        }
    }

    // TableLogDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class TableLogDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TableLogDetail>
    {
        public TableLogDetailConfiguration()
            : this("dbo")
        {
        }

        public TableLogDetailConfiguration(string schema)
        {
            ToTable("TableLogDetail", schema);
            Property(x => x.TableLogDetailId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TableLogId).HasColumnName(@"TableLogId").HasColumnType("bigint");
            Property(x => x.ColumnName).HasColumnName(@"ColumnName").HasColumnType("varchar").IsUnicode(false);
            Property(x => x.OldValue).HasColumnName(@"OldValue").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.NewValue).HasColumnName(@"NewValue").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.TableLog).WithMany(b => b.TableLogDetails).HasForeignKey(c => c.TableLogId).WillCascadeOnDelete(false); // FK_TableLogDetail_TableLog
        }
    }

    #endregion

}
// </auto-generated>

